/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TraineeAttendanceService } from "../traineeAttendance.service";
import { TraineeAttendanceCreateInput } from "./TraineeAttendanceCreateInput";
import { TraineeAttendance } from "./TraineeAttendance";
import { TraineeAttendanceFindManyArgs } from "./TraineeAttendanceFindManyArgs";
import { TraineeAttendanceWhereUniqueInput } from "./TraineeAttendanceWhereUniqueInput";
import { TraineeAttendanceUpdateInput } from "./TraineeAttendanceUpdateInput";

export class TraineeAttendanceControllerBase {
  constructor(protected readonly service: TraineeAttendanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TraineeAttendance })
  async createTraineeAttendance(
    @common.Body() data: TraineeAttendanceCreateInput
  ): Promise<TraineeAttendance> {
    return await this.service.createTraineeAttendance({
      data: data,
      select: {
        createdAt: true,
        date: true,
        id: true,
        status: true,
        traineeId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TraineeAttendance] })
  @ApiNestedQuery(TraineeAttendanceFindManyArgs)
  async traineeAttendances(
    @common.Req() request: Request
  ): Promise<TraineeAttendance[]> {
    const args = plainToClass(TraineeAttendanceFindManyArgs, request.query);
    return this.service.traineeAttendances({
      ...args,
      select: {
        createdAt: true,
        date: true,
        id: true,
        status: true,
        traineeId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TraineeAttendance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async traineeAttendance(
    @common.Param() params: TraineeAttendanceWhereUniqueInput
  ): Promise<TraineeAttendance | null> {
    const result = await this.service.traineeAttendance({
      where: params,
      select: {
        createdAt: true,
        date: true,
        id: true,
        status: true,
        traineeId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TraineeAttendance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTraineeAttendance(
    @common.Param() params: TraineeAttendanceWhereUniqueInput,
    @common.Body() data: TraineeAttendanceUpdateInput
  ): Promise<TraineeAttendance | null> {
    try {
      return await this.service.updateTraineeAttendance({
        where: params,
        data: data,
        select: {
          createdAt: true,
          date: true,
          id: true,
          status: true,
          traineeId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TraineeAttendance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTraineeAttendance(
    @common.Param() params: TraineeAttendanceWhereUniqueInput
  ): Promise<TraineeAttendance | null> {
    try {
      return await this.service.deleteTraineeAttendance({
        where: params,
        select: {
          createdAt: true,
          date: true,
          id: true,
          status: true,
          traineeId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
