/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Lab as PrismaLab,
  Employee as PrismaEmployee,
  Trainee as PrismaTrainee,
} from "@prisma/client";

export class LabServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LabCountArgs, "select">): Promise<number> {
    return this.prisma.lab.count(args);
  }

  async labs<T extends Prisma.LabFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LabFindManyArgs>
  ): Promise<PrismaLab[]> {
    return this.prisma.lab.findMany<Prisma.LabFindManyArgs>(args);
  }
  async lab<T extends Prisma.LabFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LabFindUniqueArgs>
  ): Promise<PrismaLab | null> {
    return this.prisma.lab.findUnique(args);
  }
  async createLab<T extends Prisma.LabCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LabCreateArgs>
  ): Promise<PrismaLab> {
    return this.prisma.lab.create<T>(args);
  }
  async updateLab<T extends Prisma.LabUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LabUpdateArgs>
  ): Promise<PrismaLab> {
    return this.prisma.lab.update<T>(args);
  }
  async deleteLab<T extends Prisma.LabDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LabDeleteArgs>
  ): Promise<PrismaLab> {
    return this.prisma.lab.delete(args);
  }

  async findEmployees(
    parentId: string,
    args: Prisma.EmployeeFindManyArgs
  ): Promise<PrismaEmployee[]> {
    return this.prisma.lab
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employees(args);
  }

  async findTrainees(
    parentId: string,
    args: Prisma.TraineeFindManyArgs
  ): Promise<PrismaTrainee[]> {
    return this.prisma.lab
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .trainees(args);
  }
}
