/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TraineeAttendance } from "./TraineeAttendance";
import { TraineeAttendanceCountArgs } from "./TraineeAttendanceCountArgs";
import { TraineeAttendanceFindManyArgs } from "./TraineeAttendanceFindManyArgs";
import { TraineeAttendanceFindUniqueArgs } from "./TraineeAttendanceFindUniqueArgs";
import { CreateTraineeAttendanceArgs } from "./CreateTraineeAttendanceArgs";
import { UpdateTraineeAttendanceArgs } from "./UpdateTraineeAttendanceArgs";
import { DeleteTraineeAttendanceArgs } from "./DeleteTraineeAttendanceArgs";
import { Trainee } from "../../trainee/base/Trainee";
import { TraineeAttendanceService } from "../traineeAttendance.service";
@graphql.Resolver(() => TraineeAttendance)
export class TraineeAttendanceResolverBase {
  constructor(protected readonly service: TraineeAttendanceService) {}

  async _traineeAttendancesMeta(
    @graphql.Args() args: TraineeAttendanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TraineeAttendance])
  async traineeAttendances(
    @graphql.Args() args: TraineeAttendanceFindManyArgs
  ): Promise<TraineeAttendance[]> {
    return this.service.traineeAttendances(args);
  }

  @graphql.Query(() => TraineeAttendance, { nullable: true })
  async traineeAttendance(
    @graphql.Args() args: TraineeAttendanceFindUniqueArgs
  ): Promise<TraineeAttendance | null> {
    const result = await this.service.traineeAttendance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TraineeAttendance)
  async createTraineeAttendance(
    @graphql.Args() args: CreateTraineeAttendanceArgs
  ): Promise<TraineeAttendance> {
    return await this.service.createTraineeAttendance({
      ...args,
      data: {
        ...args.data,

        trainee: args.data.trainee
          ? {
              connect: args.data.trainee,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TraineeAttendance)
  async updateTraineeAttendance(
    @graphql.Args() args: UpdateTraineeAttendanceArgs
  ): Promise<TraineeAttendance | null> {
    try {
      return await this.service.updateTraineeAttendance({
        ...args,
        data: {
          ...args.data,

          trainee: args.data.trainee
            ? {
                connect: args.data.trainee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TraineeAttendance)
  async deleteTraineeAttendance(
    @graphql.Args() args: DeleteTraineeAttendanceArgs
  ): Promise<TraineeAttendance | null> {
    try {
      return await this.service.deleteTraineeAttendance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Trainee, {
    nullable: true,
    name: "trainee",
  })
  async getTrainee(
    @graphql.Parent() parent: TraineeAttendance
  ): Promise<Trainee | null> {
    const result = await this.service.getTrainee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
