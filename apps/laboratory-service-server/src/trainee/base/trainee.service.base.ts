/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Trainee as PrismaTrainee,
  TraineeAttendance as PrismaTraineeAttendance,
  Lab as PrismaLab,
} from "@prisma/client";

export class TraineeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TraineeCountArgs, "select">): Promise<number> {
    return this.prisma.trainee.count(args);
  }

  async trainees<T extends Prisma.TraineeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TraineeFindManyArgs>
  ): Promise<PrismaTrainee[]> {
    return this.prisma.trainee.findMany<Prisma.TraineeFindManyArgs>(args);
  }
  async trainee<T extends Prisma.TraineeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TraineeFindUniqueArgs>
  ): Promise<PrismaTrainee | null> {
    return this.prisma.trainee.findUnique(args);
  }
  async createTrainee<T extends Prisma.TraineeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TraineeCreateArgs>
  ): Promise<PrismaTrainee> {
    return this.prisma.trainee.create<T>(args);
  }
  async updateTrainee<T extends Prisma.TraineeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TraineeUpdateArgs>
  ): Promise<PrismaTrainee> {
    return this.prisma.trainee.update<T>(args);
  }
  async deleteTrainee<T extends Prisma.TraineeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TraineeDeleteArgs>
  ): Promise<PrismaTrainee> {
    return this.prisma.trainee.delete(args);
  }

  async findTraineeAttendances(
    parentId: string,
    args: Prisma.TraineeAttendanceFindManyArgs
  ): Promise<PrismaTraineeAttendance[]> {
    return this.prisma.trainee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .traineeAttendances(args);
  }

  async getLab(parentId: string): Promise<PrismaLab | null> {
    return this.prisma.trainee
      .findUnique({
        where: { id: parentId },
      })
      .lab();
  }
}
