/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { IncomeAndExpenses } from "./IncomeAndExpenses";
import { IncomeAndExpensesCountArgs } from "./IncomeAndExpensesCountArgs";
import { IncomeAndExpensesFindManyArgs } from "./IncomeAndExpensesFindManyArgs";
import { IncomeAndExpensesFindUniqueArgs } from "./IncomeAndExpensesFindUniqueArgs";
import { CreateIncomeAndExpensesArgs } from "./CreateIncomeAndExpensesArgs";
import { UpdateIncomeAndExpensesArgs } from "./UpdateIncomeAndExpensesArgs";
import { DeleteIncomeAndExpensesArgs } from "./DeleteIncomeAndExpensesArgs";
import { IncomeAndExpensesService } from "../incomeAndExpenses.service";
@graphql.Resolver(() => IncomeAndExpenses)
export class IncomeAndExpensesResolverBase {
  constructor(protected readonly service: IncomeAndExpensesService) {}

  async _incomeAndExpensesItemsMeta(
    @graphql.Args() args: IncomeAndExpensesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IncomeAndExpenses])
  async incomeAndExpensesItems(
    @graphql.Args() args: IncomeAndExpensesFindManyArgs
  ): Promise<IncomeAndExpenses[]> {
    return this.service.incomeAndExpensesItems(args);
  }

  @graphql.Query(() => IncomeAndExpenses, { nullable: true })
  async incomeAndExpenses(
    @graphql.Args() args: IncomeAndExpensesFindUniqueArgs
  ): Promise<IncomeAndExpenses | null> {
    const result = await this.service.incomeAndExpenses(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IncomeAndExpenses)
  async createIncomeAndExpenses(
    @graphql.Args() args: CreateIncomeAndExpensesArgs
  ): Promise<IncomeAndExpenses> {
    return await this.service.createIncomeAndExpenses({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => IncomeAndExpenses)
  async updateIncomeAndExpenses(
    @graphql.Args() args: UpdateIncomeAndExpensesArgs
  ): Promise<IncomeAndExpenses | null> {
    try {
      return await this.service.updateIncomeAndExpenses({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IncomeAndExpenses)
  async deleteIncomeAndExpenses(
    @graphql.Args() args: DeleteIncomeAndExpensesArgs
  ): Promise<IncomeAndExpenses | null> {
    try {
      return await this.service.deleteIncomeAndExpenses(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
