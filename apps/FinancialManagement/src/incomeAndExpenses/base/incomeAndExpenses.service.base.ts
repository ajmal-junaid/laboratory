/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  IncomeAndExpenses as PrismaIncomeAndExpenses,
} from "@prisma/client";

export class IncomeAndExpensesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IncomeAndExpensesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.incomeAndExpenses.count(args);
  }

  async incomeAndExpensesItems<T extends Prisma.IncomeAndExpensesFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.IncomeAndExpensesFindManyArgs>
  ): Promise<PrismaIncomeAndExpenses[]> {
    return this.prisma.incomeAndExpenses.findMany<Prisma.IncomeAndExpensesFindManyArgs>(
      args
    );
  }
  async incomeAndExpenses<T extends Prisma.IncomeAndExpensesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.IncomeAndExpensesFindUniqueArgs>
  ): Promise<PrismaIncomeAndExpenses | null> {
    return this.prisma.incomeAndExpenses.findUnique(args);
  }
  async createIncomeAndExpenses<T extends Prisma.IncomeAndExpensesCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IncomeAndExpensesCreateArgs>
  ): Promise<PrismaIncomeAndExpenses> {
    return this.prisma.incomeAndExpenses.create<T>(args);
  }
  async updateIncomeAndExpenses<T extends Prisma.IncomeAndExpensesUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IncomeAndExpensesUpdateArgs>
  ): Promise<PrismaIncomeAndExpenses> {
    return this.prisma.incomeAndExpenses.update<T>(args);
  }
  async deleteIncomeAndExpenses<T extends Prisma.IncomeAndExpensesDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.IncomeAndExpensesDeleteArgs>
  ): Promise<PrismaIncomeAndExpenses> {
    return this.prisma.incomeAndExpenses.delete(args);
  }
}
