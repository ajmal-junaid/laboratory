/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IncomeAndExpensesService } from "../incomeAndExpenses.service";
import { IncomeAndExpensesCreateInput } from "./IncomeAndExpensesCreateInput";
import { IncomeAndExpenses } from "./IncomeAndExpenses";
import { IncomeAndExpensesFindManyArgs } from "./IncomeAndExpensesFindManyArgs";
import { IncomeAndExpensesWhereUniqueInput } from "./IncomeAndExpensesWhereUniqueInput";
import { IncomeAndExpensesUpdateInput } from "./IncomeAndExpensesUpdateInput";

export class IncomeAndExpensesControllerBase {
  constructor(protected readonly service: IncomeAndExpensesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IncomeAndExpenses })
  async createIncomeAndExpenses(
    @common.Body() data: IncomeAndExpensesCreateInput
  ): Promise<IncomeAndExpenses> {
    return await this.service.createIncomeAndExpenses({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        description: true,
        id: true,
        typeField: true,
        updatedAt: true,
        verifiedBy: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IncomeAndExpenses] })
  @ApiNestedQuery(IncomeAndExpensesFindManyArgs)
  async incomeAndExpensesItems(
    @common.Req() request: Request
  ): Promise<IncomeAndExpenses[]> {
    const args = plainToClass(IncomeAndExpensesFindManyArgs, request.query);
    return this.service.incomeAndExpensesItems({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        description: true,
        id: true,
        typeField: true,
        updatedAt: true,
        verifiedBy: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IncomeAndExpenses })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async incomeAndExpenses(
    @common.Param() params: IncomeAndExpensesWhereUniqueInput
  ): Promise<IncomeAndExpenses | null> {
    const result = await this.service.incomeAndExpenses({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        description: true,
        id: true,
        typeField: true,
        updatedAt: true,
        verifiedBy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IncomeAndExpenses })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIncomeAndExpenses(
    @common.Param() params: IncomeAndExpensesWhereUniqueInput,
    @common.Body() data: IncomeAndExpensesUpdateInput
  ): Promise<IncomeAndExpenses | null> {
    try {
      return await this.service.updateIncomeAndExpenses({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          description: true,
          id: true,
          typeField: true,
          updatedAt: true,
          verifiedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IncomeAndExpenses })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIncomeAndExpenses(
    @common.Param() params: IncomeAndExpensesWhereUniqueInput
  ): Promise<IncomeAndExpenses | null> {
    try {
      return await this.service.deleteIncomeAndExpenses({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          description: true,
          id: true,
          typeField: true,
          updatedAt: true,
          verifiedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
